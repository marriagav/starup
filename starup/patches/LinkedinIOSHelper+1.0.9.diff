diff --git a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAppSettings.m b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAppSettings.m
index 906eec3..63ae2fe 100644
--- a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAppSettings.m
+++ b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAppSettings.m
@@ -63,14 +63,14 @@
     self.grantedAccess = permissions;
     self.permissions = [NSMutableArray new];
 
-    if ([permissions containsObject:@(ContactInfo)])    [self.permissions addObject:@"r_contactinfo"];
+    if ([permissions containsObject:@(ContactInfo)])    [self.permissions addObject:@"r_liteprofile"];
     if ([permissions containsObject:@(FullProfile)])    [self.permissions addObject:@"r_fullprofile"];
     if (![permissions containsObject:@(FullProfile)] &&
         [permissions containsObject:@(BasicProfile)])   [self.permissions addObject:@"r_basicprofile"];
     if ([permissions containsObject:@(Nus)])            [self.permissions addObject:@"rw_nus"];
     if ([permissions containsObject:@(Network)])        [self.permissions addObject:@"r_network"];
     if ([permissions containsObject:@(EmailAddress)])   [self.permissions addObject:@"r_emailaddress"];
-    if ([permissions containsObject:@(Share)])          [self.permissions addObject:@"w_share"];
+    if ([permissions containsObject:@(Share)])          [self.permissions addObject:@"w_member_social"];
     if ([permissions containsObject:@(CompanyAdmin)])   [self.permissions addObject:@"rw_company_admin"];
     if ([permissions containsObject:@(Groups)])         [self.permissions addObject:@"rw_groups"];
     if ([permissions containsObject:@(Messages)])       [self.permissions addObject:@"w_messages"];
diff --git a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAuthorizationViewController.m b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAuthorizationViewController.m
index 73fbc14..fa68ee2 100644
--- a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAuthorizationViewController.m
+++ b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInAuthorizationViewController.m
@@ -67,7 +67,7 @@ NSString * const linkedinIosHelperDomain = @"com.linkedinioshelper";
 - (void)viewDidAppear:(BOOL)animated {
     [super viewDidAppear:animated];
     
-    NSString *linkedIn = [NSString stringWithFormat:@"https://www.linkedin.com/uas/oauth2/authorization?response_type=code&client_id=%@&scope=%@&state=%@&redirect_uri=%@", self.serviceManager.settings.clientId, self.serviceManager.settings.grantedAccessString, self.serviceManager.settings.state, self.serviceManager.settings.applicationWithRedirectURL];
+    NSString *linkedIn = [NSString stringWithFormat:@"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=%@&state=%@&redirect_uri=%@&scope=%@", self.serviceManager.settings.clientId, self.serviceManager.settings.state, self.serviceManager.settings.applicationWithRedirectURL, self.serviceManager.settings.grantedAccessString];
     [self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:linkedIn]]];
 }
 
@@ -90,10 +90,9 @@ NSString * const linkedinIosHelperDomain = @"com.linkedinioshelper";
 - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
     
     NSString *url = [[request URL] absoluteString];
-    
     //prevent loading URL if it is the redirectURL
     self.handling = [url hasPrefix:self.serviceManager.settings.applicationWithRedirectURL];
-    
+
     if (self.isHandling) {
         if ([url rangeOfString:@"error"].location != NSNotFound) {
             BOOL accessDenied = [url rangeOfString:@"the+user+denied+your+request"].location != NSNotFound;
@@ -111,12 +110,13 @@ NSString * const linkedinIosHelperDomain = @"com.linkedinioshelper";
             }
         } else {
             NSString *receivedState = [self extractGetParameter:@"state" fromURLString: url];
-            
+
             //assert that the state is as we expected it to be
             if ([self.serviceManager.settings.state isEqualToString:receivedState]) {
-                
+
                 //extract the code from the url
                 NSString *authorizationCode = [self extractGetParameter:@"code" fromURLString: url];
+                
                 if (self.authorizationCodeSuccessCallback) {
                     self.authorizationCodeSuccessCallback(authorizationCode);
                 }
diff --git a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInConnectionHandler.m b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInConnectionHandler.m
index 5e060b5..4c8c2d2 100644
--- a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInConnectionHandler.m
+++ b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInConnectionHandler.m
@@ -108,14 +108,15 @@
             break;
         case POST: {
             
-            NSData *postData = [NSData dataWithBytes:[_postString UTF8String] length:[_postString length]];
+            NSData *postData = [_postString dataUsingEncoding:NSUTF8StringEncoding];
             NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
             [request setURL:_url];
             [request setHTTPMethod:@"POST"];
-            [request setValue:@"application/json" forHTTPHeaderField:@"Current-Type"];
+            [request addValue:@"application/x-www-form-urlencoded;" forHTTPHeaderField:@"Content-Type"];
             [request setHTTPBody:postData];
             
             self.connection = [NSURLConnection connectionWithRequest:request delegate:self];
+            NSLog(@"%@", self.connection.currentRequest);
             [self.connection start];
         }
         default:
@@ -216,14 +217,12 @@
     return nil;
 }
 
-- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace
-{
+- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {
 //    NSLog(@"Authenticated");
     return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
 }
 
-- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge
-{
+- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
 //    NSLog(@"Challenged");
     if ([challenge.protectionSpace.authenticationMethod
          isEqualToString:NSURLAuthenticationMethodServerTrust])
diff --git a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.h b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.h
index bb93d6e..fbdad2d 100644
--- a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.h
+++ b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.h
@@ -86,29 +86,24 @@
 // ================== Frequently Using Fields  =================
 
 /*!
- * @brief User's job title
+ * @brief User's first name title
  */
-@property (nonatomic, copy, readonly) NSString *title;
+@property (nonatomic, copy, readonly) NSString *firstName;
 
 /*!
- * @brief User's company Name
+ * @brief User's last name
  */
-@property (nonatomic, copy, readonly) NSString *companyName;
-
-/*!
- * @brief User's email Address
- */
-@property (nonatomic, copy, readonly) NSString *emailAddress;
+@property (nonatomic, copy, readonly) NSString *lastName;
 
 /*!
  * @brief User's Photo Url
  */
-@property (nonatomic, copy, readonly) NSString *photo;
+@property (nonatomic, copy, readonly) NSString *profilePicture;
 
 /*!
- * @brief User's Industry name
+ * @brief User's unique id name
  */
-@property (nonatomic, copy, readonly) NSString *industry;
+@property (nonatomic, copy, readonly) NSString *ID;
 
 /*!
  * @brief Access Token comes from Linkedin
diff --git a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.m b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.m
index 2690156..00ec1fa 100644
--- a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.m
+++ b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInHelper.m
@@ -16,14 +16,11 @@
 
 @property (nonatomic, strong) LinkedInServiceManager *service;
 
-/**
- * @brief ReadWrite Properties
- */
-@property (nonatomic, copy, readwrite) NSString *emailAddress;
-@property (nonatomic, copy, readwrite) NSString *industry;
-@property (nonatomic, copy, readwrite) NSString *title;
-@property (nonatomic, copy, readwrite) NSString *photo;
-@property (nonatomic, copy, readwrite) NSString *companyName;
+
+@property (nonatomic, copy, readwrite) NSString *firstName;
+@property (nonatomic, copy, readwrite) NSString *lastName;
+@property (nonatomic, copy, readwrite) NSString *profilePicture;
+@property (nonatomic, copy, readwrite) NSString *ID;
 @property (nonatomic, copy, readwrite) NSString *accessToken;
 
 /*!
@@ -135,7 +132,7 @@ NSString * StringOrEmpty(NSString *string) {
         
         [self.service getAccessToken:code
                              success:^(NSDictionary *accessTokenData) {
-                                 [weakSelf requestMeWithToken];
+                                [weakSelf requestMeWithToken];
                              }
                              failure:^(NSError *error) {
                                  // Quering accessToken failed
@@ -231,64 +228,73 @@ NSString * StringOrEmpty(NSString *string) {
     
     NSAssert(_customSubPermissions, @"Sub Permissions can not be null !!");
     
-    return [[NSString stringWithFormat:@"https://api.linkedin.com/v1/people/~:(%@)?oauth2_access_token=%@&format=json", _customSubPermissions, [self accessToken]] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
+    return @"https://api.linkedin.com/v2/me?projection=(id,firstName,lastName,profilePicture(displayImage~:playableStreams))";
+    
+//    return [[NSString stringWithFormat:@"https://api.linkedin.com/v2/me", _customSubPermissions, [self accessToken]] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
 }
 
-- ( void )requestMeWithToken {
+- ( void )requestMeWithToken{
     
     NSString *clientUrl = [self prepareUrlForMe];
     
     __weak typeof(self) weakSelf = self;
     
-    LinkedInConnectionHandler *connection = [[LinkedInConnectionHandler alloc] initWithURL:[NSURL URLWithString:clientUrl]
-                                                                                      type:GET
-                                                                                  postData:nil
-                                                                                   success:^(NSDictionary *response) {
-                                                                                       
-                                                                                       NSString *title = @"";
-                                                                                       NSString *companyName = @"";
-                                                                                       NSString *emailAddress = StringOrEmpty(response[ @"emailAddress" ]);
-                                                                                       NSString *photo        = StringOrEmpty(response[ @"pictureUrl" ]);
-                                                                                       NSString *industry     = StringOrEmpty(response[ @"industry" ]);
-                                                                                       
-                                                                                       NSDictionary *dictionary = response[ @"positions" ];
-                                                                                       if ( dictionary[@"values"] ) {
-                                                                                           NSArray *values = dictionary[@"values"];
-                                                                                           
-                                                                                           if ( values.count ) {
-                                                                                               NSDictionary *company = values[0];
-                                                                                               title = company[ @"title" ];
-                                                                                               if ( company[ @"company" ] ) {
-                                                                                                   NSDictionary *companyDic = company[ @"company" ];
-                                                                                                   companyName              = companyDic[ @"name" ];
-                                                                                               }
-                                                                                           }
-                                                                                       }
-                                                                                       
-                                                                                       weakSelf.emailAddress  = emailAddress;
-                                                                                       weakSelf.industry      = industry;
-                                                                                       weakSelf.title         = StringOrEmpty(title);
-                                                                                       weakSelf.photo         = photo;
-                                                                                       weakSelf.companyName   = StringOrEmpty(companyName);
-                                                                                       
-                                                                                       NSAssert(weakSelf.userInfoSuccessBlock, @"SHOULD SET USER INFO SUCCESS BLOCK!");
-                                                                                       if (weakSelf.userInfoSuccessBlock) {
-                                                                                           weakSelf.userInfoSuccessBlock(response);
-                                                                                       }
-                                                                                       
-                                                                                   }
-                                                                                    cancel:^{
-                                                                                        NSLog(@"Cancelled");
-                                                                                    }
-                                                                                   failure:^(NSError *err) {
-                                                                                       
-                                                                                       NSAssert(weakSelf.dismissFailBlock, @"SHOULD SET USER INFO FAIL BLOCK!");
-                                                                                       if (weakSelf.dismissFailBlock) {
-                                                                                           weakSelf.dismissFailBlock(err);
-                                                                                       }
-                                                                                   }
-                                             ];
-    [connection start];
+        NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:clientUrl]];
+    
+        //create the Method "GET" or "POST"
+        [urlRequest setHTTPMethod:@"GET"];
+    
+        [urlRequest addValue:[NSString stringWithFormat:@"Bearer %@", [self accessToken]] forHTTPHeaderField:@"Authorization"];
+    
+        NSURLSession *session = [NSURLSession sharedSession];
+        NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:urlRequest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
+            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
+            if(httpResponse.statusCode == 200)
+            {
+                NSError *parseError = nil;
+                NSDictionary *response = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
+                if (weakSelf.userInfoSuccessBlock) {
+                   weakSelf.userInfoSuccessBlock(response);
+               }
+            }
+            else
+            {
+//                failure(error);
+            }
+        }];
+        [dataTask resume];
+}
+
+- ( void )requestEmailWithToken{
+    
+    NSString *clientUrl = @"https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))";
+    
+    __weak typeof(self) weakSelf = self;
+    
+        NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:clientUrl]];
+    
+        //create the Method "GET" or "POST"
+        [urlRequest setHTTPMethod:@"GET"];
+    
+        [urlRequest addValue:[NSString stringWithFormat:@"Bearer %@", [self accessToken]] forHTTPHeaderField:@"Authorization"];
+    
+        NSURLSession *session = [NSURLSession sharedSession];
+        NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:urlRequest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
+            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
+            if(httpResponse.statusCode == 200)
+            {
+                NSError *parseError = nil;
+                NSDictionary *response = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
+                if (weakSelf.userInfoSuccessBlock) {
+                   weakSelf.userInfoSuccessBlock(response);
+               }
+            }
+            else
+            {
+//                failure(error);
+            }
+        }];
+        [dataTask resume];
 }
 
 @end
diff --git a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInServiceManager.m b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInServiceManager.m
index 3717848..86af984 100644
--- a/cocoapods-patch-20220720-10737-i6oqdx/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInServiceManager.m
+++ b/Pods/LinkedinIOSHelper/LinkedInIOSHelper/LinkedInHelper/LinkedInServiceManager.m
@@ -107,60 +107,46 @@
 - (void)getAccessToken:(NSString *)authorizationCode
                success:(void (^)(NSDictionary *))success
                failure:(void (^)(NSError *))failure {
-    
-    _settings.applicationWithRedirectURL = (NSString *)CFBridgingRelease( CFURLCreateStringByAddingPercentEscapes( NULL,
-                                                                                                               (__bridge CFStringRef) _settings.applicationWithRedirectURL,
-                                                                                                               NULL,
-                                                                                                               CFSTR("!*'();:@&=+$,/?%#[]"),
-                                                                                                               kCFStringEncodingUTF8
-                                                                                                               )
-                                                                );
-    
-    [self setSuccessBlock:^(NSDictionary *dict) {
-        
-        NSString *accessToken = [dict objectForKey:@"access_token"];
-        NSTimeInterval expiration = [[dict objectForKey:@"expires_in"] doubleValue];
-        
-        // store credentials
-        [LinkedinSimpleKeychain saveWithService:LINKEDIN_TOKEN_KEY data:accessToken];
-        [LinkedinSimpleKeychain saveWithService:LINKEDIN_AUTHORIZATION_CODE data:authorizationCode];
-        [LinkedinSimpleKeychain saveWithService:LINKEDIN_EXPIRATION_KEY data:@(expiration)];
-        [LinkedinSimpleKeychain saveWithService:LINKEDIN_CREATION_KEY data:@([[NSDate date] timeIntervalSince1970])];
-        
-        success(dict);
-    }];
-    
-    [self setFailureBlock:^(NSError *err) {
-        failure(err);
-    }];
 
     NSString *postDataStr = [NSString stringWithFormat:@"grant_type=authorization_code""&code=%@""&redirect_uri=%@""&client_id=%@""&client_secret=%@", authorizationCode, _settings.applicationWithRedirectURL, _settings.clientId, _settings.clientSecret];
-    
-    __weak typeof (self) weakSelf = self;
-    
-    LinkedInConnectionHandler *handler = [[LinkedInConnectionHandler alloc] initWithURL:[NSURL URLWithString:@"https://www.linkedin.com/uas/oauth2/accessToken"]
-                                                                                   type:POST
-                                                                               postData:postDataStr
-                                                                                success:^(NSDictionary *response) {
-                                                                                    if (weakSelf.successBlock) {
-                                                                                        weakSelf.successBlock(response);
-                                                                                    }
-                                                                                }
-                                                                                 cancel:^{
-                                                                                     if (weakSelf.failureBlock) {
-                                                                                         NSError *error = [NSError errorWithDomain:@"com.linkedinioshelper"
-                                                                                                                            code:-2
-                                                                                                                        userInfo:@{NSLocalizedDescriptionKey:@"Url connection canceled"}];
-                                                                                         weakSelf.failureBlock(error);
-                                                                                     }
-                                                                                 }
-                                                                                failure:^(NSError *err) {
-                                                                                    if (weakSelf.failureBlock) {
-                                                                                        weakSelf.failureBlock(err);
-                                                                                    }
-                                                                                }
-                                          ];
-    [handler start];
+    NSData *data1 = [postDataStr dataUsingEncoding:NSUTF8StringEncoding];
+    
+        NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:@"https://www.linkedin.com/oauth/v2/accessToken"]];
+    
+        //create the Method "GET" or "POST"
+        [urlRequest setHTTPMethod:@"POST"];
+    
+        //Apply the data to the body
+        [urlRequest setHTTPBody:data1];
+    
+        [urlRequest addValue:@"application/x-www-form-urlencoded;" forHTTPHeaderField:@"Content-Type"];
+    
+        NSURLSession *session = [NSURLSession sharedSession];
+        NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:urlRequest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
+            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
+            if(httpResponse.statusCode == 200)
+            {
+                NSError *parseError = nil;
+                NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
+                
+                NSString *accessToken = responseDictionary[@"access_token"];
+                
+                NSTimeInterval expiration = [[responseDictionary objectForKey:@"expires_in"] doubleValue];
+
+                // store credentials
+                [LinkedinSimpleKeychain saveWithService:LINKEDIN_TOKEN_KEY data:accessToken];
+                [LinkedinSimpleKeychain saveWithService:LINKEDIN_AUTHORIZATION_CODE data:authorizationCode];
+                [LinkedinSimpleKeychain saveWithService:LINKEDIN_EXPIRATION_KEY data:@(expiration)];
+                [LinkedinSimpleKeychain saveWithService:LINKEDIN_CREATION_KEY data:@([[NSDate date] timeIntervalSince1970])];
+
+                success(responseDictionary);
+            }
+            else
+            {
+                failure(error);
+            }
+        }];
+        [dataTask resume];
 }
 
 #pragma mark - Memory Management -
@@ -169,4 +155,5 @@
 {
     
 }
+
 @end
